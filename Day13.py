from functools import cache


def main(data):
    result = find_either_mirror(data, True)
    print(f"The value generated by the notes is {result}.")
    return


def find_either_mirror(mirror_map, check_smudges=False):
    result = 0
    temp_map = []
    for line in mirror_map:
        if line == "":
            result += locate_mirror(temp_map, check_smudges)
            temp_map = []
        else:
            temp_map.append(line)
    result += locate_mirror(temp_map, check_smudges)
    return result


def locate_mirror(temp_map, check_smudges):
    mirror_location = find_individual_mirror(temp_map, check_smudges)
    if mirror_location > -1:
        return mirror_location * 100
    rotated_map = rotate_map(temp_map)
    mirror_location = find_individual_mirror(rotated_map, check_smudges)
    if mirror_location > -1:
        return mirror_location
    print_map(temp_map)
    print_map(rotated_map)
    return 0


def print_map(map_data):
    print()
    for line in map_data:
        for char in line:
            print(char, end="")
        print()


def find_individual_mirror(mirror_map, check_smudges):
    temp = []
    result = -1
    for idx, line in enumerate(mirror_map):
        temp.append(line)
        if check_if_mirror(mirror_map, temp, idx, check_smudges):
            result = idx + 1
    return result


def check_if_mirror(main_map, temp, idx, check_smudges):
    result = False
    starting_idx = int(idx)
    for temp_idx, line in enumerate(reversed(temp)):
        mirror_idx = starting_idx + 1 + temp_idx
        if mirror_idx >= len(main_map):
            return result
        if temp[idx] == main_map[mirror_idx]:
            result = True
            idx -= 1
        elif check_smudges and (temp[idx].count("#") - main_map[mirror_idx].count("#")) == 1:
            smudged = check_for_smudge(temp[idx], main_map[mirror_idx])
            if smudged:
                result = True
                idx -= 1
        else:
            return False
    return result


@cache
def check_for_smudge(string1, string2):
    result = False
    for idx, char in enumerate(string1):
        if char == "#":
            temp_string = string1[:idx] + "." + string1[idx + 1:]
        else:
            temp_string = string1[:idx] + "#" + string1[idx + 1:]
        if temp_string == string2:
            result = True
            break
    return result


def rotate_map(mirror_map):
    result = []
    map_tuple = (zip(*mirror_map[::1]))
    for line in map_tuple:
        temp = ""
        for item in line:
            temp += item
        result.append(temp)
    return result
